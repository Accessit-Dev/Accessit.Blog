@using System.Globalization
@model Orchard.Layouts.ViewModels.LayoutEditor
@{
    // Library dependencies.
    Style.Require("jQueryUI_Orchard");
    Style.Require("FontAwesome");
    Style.Require("MediaLibraryPickerAdmin");

    Script.Require("jQueryCookie");
    Script.Require("jQueryUI_Widgets");
    Script.Require("Layouts.LayoutEditor");
    Script.Include("jquery.deserialize.js");

    // Utilities.
    Style.Include("dialog.css");
    Script.Include("dialog.js");
    Script.Include("frame.js");
    Script.Include("LayoutDecoder.js");

    // The actual layout editor.
    Style.Include("LayoutEditor.css", "LayoutEditor.min.css");
    Script.Include("LayoutDesignerHost.js");

    using (Script.Foot()) {
        <script>
            angular
                .module("LayoutEditor")
                .constant("environment", {
                    templateUrl: function (templateName) {
                        return "@Url.Action("Get", "Template", new { area = "Orchard.Layouts" })" + "/" + templateName;
                    }
                });
            jQuery(function () {
                var editorConfig = JSON.parse(LayoutEditor.decode("@Html.Raw(Url.Encode(Model.ConfigurationData))"));
                var editorCanvasData = JSON.parse(LayoutEditor.decode("@Html.Raw(Url.Encode(Model.Data))"));

                window.layoutEditor = new LayoutEditor.Editor(editorConfig, editorCanvasData);
            });
        </script>
    }

    var contentId = Model.Content != null ? Model.Content.Id : default(int?);
    var contentType = Model.Content != null ? Model.Content.ContentItem.ContentType : default(string);
}

<fieldset>
    <div class="layout-designer"
         data-modelstate-valid="@ViewData.ModelState.IsValid.ToString().ToLower()"
         data-display-type="Design"
         data-edit-url="@Url.Action("Edit", "Element", new { session = Model.SessionKey, contentId, contentType, area = "Orchard.Layouts" })"
         data-apply-template-url="@Url.Action("ApplyTemplate", "Layout", new { contentId, contentType, area = "Orchard.Layouts" })"
         data-confirm-delete-prompt="@T("Are you sure you want to delete this element?")"
         data-editor-dialog-title-format="@T("$1 Properties")"
         data-editor-dialog-name="Layout"
         data-anti-forgery-token="@Html.AntiForgeryTokenValueOrchard()"
         data-session-key="@Model.SessionKey">

        @Html.HiddenFor(m => m.SessionKey)
        @Html.HiddenFor(m => m.Data, new { @class = "layout-data-field" })
        @Html.HiddenFor(m => m.RecycleBin, new { @class = "recycle-bin-data-field" })
        <div class="layout-editor-toolbar">
            <ol class="layout-editor-toolbar-group">
                <li>
                    <label>@T("Layout")</label>
                </li>
            </ol>
            <ol class="layout-editor-toolbar-group">
                <li>
                    <a class="layout-editor-help-link" href="#"><i class="fa fa-info-circle"></i> Clipboard, keyboard shortcuts, etc.</a>
                </li>
                @if (Model.Templates.Any()) {
                    var options = Model.Templates.Select(x => new SelectListItem { Text = Html.ItemDisplayText(x).ToString(), Value = x.Id.ToString(CultureInfo.InvariantCulture), Selected = x.Id == Model.TemplateId });
                    <li>
                        <div class="template-picker">
                            <label>
                                @T("Use existing layout:")
                                @Html.DropDownListFor(x => x.TemplateId, options, T("(None)").Text)
                            </label>
                        </div>
                    </li>
                }
            </ol>
        </div>
        <div class="layout-editor-holder">
            <orc-layout-editor model="window.layoutEditor" ng-app="LayoutEditor" />
        </div>
        @Display.DialogTemplate(Name: "Layout")
        @Display.LayoutEditor_HelpDialog()
    </div>
</fieldset>
